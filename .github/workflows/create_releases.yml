name: Build Releases

on:
  push:
    branches:
      - '**'

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Get commit message
        id: getmsg
        run: |
          echo "msg=${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
      - name: Check commit message
        id: check
        run: |
          if [[ "${{ steps.getmsg.outputs.msg }}" =~ ^release\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  build-windows:
    needs: check-commit-message
    if: needs.check-commit-message.outputs.should_run == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run compile
      - name: Package Windows Release
        run: npm run app:build-win
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: dist/win/*

  build-linux:
    needs: check-commit-message
    if: needs.check-commit-message.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run compile
      - name: Package Linux Release
        run: npm run app:build-linux
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: dist/linux/*

  build-mac:
    needs: check-commit-message
    if: needs.check-commit-message.outputs.should_run == 'true'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run compile
      - name: Package Mac Release
        run: npm run app:build-mac
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      - name: Upload Mac Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac-release
          path: dist/mac/*

  create-release:
    needs: [check-commit-message, build-windows, build-linux, build-mac]
    if: needs.check-commit-message.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: ./release/win
      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-release
          path: ./release/linux
      - name: Download Mac Artifact
        uses: actions/download-artifact@v4
        with:
          name: mac-release
          path: ./release/mac
      - name: Extract version from commit message
        id: extract_version
        run: |
          MSG="${{ github.event.head_commit.message }}"
          if [[ "$MSG" =~ ^release\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Commit message does not match expected pattern."
            exit 1
          fi
      - name: Create and push tag if not exists
        run: |
          git fetch --tags
          TAG_EXISTS=$(git tag -l "v${{ steps.extract_version.outputs.version }}")
          if [ -z "$TAG_EXISTS" ]; then
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag v${{ steps.extract_version.outputs.version }}
            git push origin v${{ steps.extract_version.outputs.version }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          fail_on_unmatched_files: false
          files: |
            release/win/*
            release/linux/*
            release/mac/*
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
